boolean onDependabotBranch(String ecosystem) {
    return env.BRANCH_NAME ==~ /dependabot\/${ecosystem}\/.*/
}

pipeline {
    agent any

    options{
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
    }

    triggers {
        upstream "inmanta-core/master"
        cron("H H(2-5) * * *")
        pollSCM '* * * * *'
    }

    environment {
      INMANTA_LS_TEST_ENV="${env.WORKSPACE}/ls-venv"
      INMANTA_EXTENSION_TEST_ENV="${env.WORKSPACE}/extension-venv"
      INMANTA_LS_PATH="${env.WORKSPACE}/server"
      INMANTA_LS_LOG_PATH="${env.WORKSPACE}/server.log"
      PIP_INDEX_URL="https://artifacts.internal.inmanta.com/inmanta/dev"
      DIR_TO_LINT="$INMANTA_LS_PATH/src $INMANTA_LS_PATH/tests"
    }

    stages {
        stage('Style checking') {
             steps {
                sh '''
                    "pwd"
                    "ls"
                    "$INMANTA_LS_PATH/env/bin/flake8 $DIR_TO_LINT"
                '''
            }
        }
        stage('Language server tests') {
            when {
                expression { ! onDependabotBranch("npm_and_yarn") }
            }
            steps {
                sh '''
                    rm -rf $INMANTA_LS_TEST_ENV
                    python3 -m venv $INMANTA_LS_TEST_ENV
                    $INMANTA_LS_TEST_ENV/bin/python3 -m pip install -U tox pip wheel
                '''
                dir("server"){
                    sh "$INMANTA_LS_TEST_ENV/bin/python3 -m tox --recreate"
                }
            }
        }
        stage('Extension tests') {
            steps {
                sh '''
                    rm -rf $INMANTA_EXTENSION_TEST_ENV
                    python3 -m venv $INMANTA_EXTENSION_TEST_ENV
                    source $INMANTA_EXTENSION_TEST_ENV/bin/activate
                    pip install --upgrade pip
                    pip install inmantals
                    deactivate
                    rm -rf node_modules
                    npm i --also=dev
                    xvfb-run npm run test
                '''
            }
        }
    }

    post {
        always {
            junit allowEmptyResults: true, testResults: 'server/junit*.xml'
            deleteDir()
        }
    }
}
