boolean onDependabotBranch(String ecosystem) {
    return env.BRANCH_NAME ==~ /dependabot\/${ecosystem}\/.*/
}

pipeline {
    agent any

    options{
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }

    triggers {
        upstream "inmanta-core/master"
        cron("H H(2-5) * * *")
        pollSCM '* * * * *'
    }

    environment {
      INMANTA_LS_TEST_ENV="${env.WORKSPACE}/ls-venv"
      INMANTA_EXTENSION_TEST_ENV="${env.WORKSPACE}/extension-venv"
      INMANTA_LS_PATH="${env.WORKSPACE}/server"
      INMANTA_LS_LOG_PATH="${env.WORKSPACE}/server.log"
      PIP_INDEX_URL="https://artifacts.internal.inmanta.com/inmanta/dev"
      INMANTA_STYLE_CHECK_ENV="${env.WORKSPACE}/style-check-venv"
      INMANTA_COMPILER_CACHE=0
    }

    stages {
        stage('Language server tests') {
            when {
                expression { ! onDependabotBranch("npm_and_yarn") }
            }
            steps {
                sh '''
                    rm -rf $INMANTA_LS_TEST_ENV
                    python3 -m venv $INMANTA_LS_TEST_ENV
                    $INMANTA_LS_TEST_ENV/bin/python3 -m pip install -U tox pip wheel
                '''
                dir("server"){
                    sh "$INMANTA_LS_TEST_ENV/bin/python3 -m tox --recreate"
                }
            }
        }
        stage('Extension tests') {
            steps {
                sh '''
                    rm -rf $INMANTA_EXTENSION_TEST_ENV
                    python3 -m venv $INMANTA_EXTENSION_TEST_ENV
                    source $INMANTA_EXTENSION_TEST_ENV/bin/activate
                    pip install --upgrade pip
                    pip install --pre ./server
                    deactivate
                    rm -rf node_modules
                    npm i --also=dev
                    xvfb-run npm run test
                '''
            }
        }
        stage('Style checking') {
             steps {
                dir("server"){
                    sh '''
                        rm -rf $INMANTA_STYLE_CHECK_ENV
                        python3 -m venv $INMANTA_STYLE_CHECK_ENV
                        source $INMANTA_STYLE_CHECK_ENV/bin/activate
                        pip install --upgrade pip
                        make pep8
                    '''
                }
            }
        }

        stage("Publish to devpi") {
            when {
                expression { BRANCH_NAME == "master" }
            }
            steps {
                withCredentials([
                usernamePassword(
                    credentialsId: 'devpi-user',
                    passwordVariable: 'DEVPI_PASS',
                    usernameVariable: 'DEVPI_USER'
                )
                ]) {
                    dir(env.REPO_NAME){
                        sh '''
                        pip install -U devpi-client
                        devpi use https://artifacts.internal.inmanta.com/inmanta/dev
                        devpi login ${DEVPI_USER} --password=${DEVPI_PASS}
                        rm -f dist/*

                        python3 setup.py egg_info -Db ".dev$(date +'%Y%m%d%H%M%S' --utc)" sdist

                        devpi upload dist/*.dev*
                        devpi logoff
                        '''
                    }
                }
            }
        }

        stage("Build Extension") {
            when {
                expression { BRANCH_NAME == "master" }
            }
            steps {
                dir('vscode-inmanta') {
                    sh '''
                        # install the extension for its vsce dependency, required for building and publishing the extension
                        # and populate vscodeignore with exceptions to node_modules of the needed modules.
                        npm ci --omit dev
                        find node_modules/ -mindepth 1 -maxdepth 1 -exec echo '!{}/**' \\; >> .vscodeignore
                        npm i

                        node_modules/.bin/vsce package
                        git checkout .
                    '''
                }
            }
        }

        stage("Publish to VS Code marketplace") {
            when {
                expression { BRANCH_NAME == "master" }
            }
            steps {
                dir('vscode-inmanta') {
                    // This token has a limited lifetime. See the credential's description for more information on how to create a new one.
                    withCredentials([string(credentialsId: 'vscode_marketplace_access_token', variable: 'VSCODE_PERSONAL_ACCESS_TOKEN')]) {
                        sh '$(npm bin)/vsce publish --packagePath *.vsix -p "${VSCODE_PERSONAL_ACCESS_TOKEN}"'
                    }
                }
            }
        }
    }

    post {
        always {
            junit allowEmptyResults: true, testResults: 'server/junit*.xml'
            deleteDir()
        }
    }
}
